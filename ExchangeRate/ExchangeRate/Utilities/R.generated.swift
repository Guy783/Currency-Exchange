//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    /// Storyboard `AddCurrency`.
    static let addCurrency = _R.storyboard.addCurrency()
    /// Storyboard `CurrencyList`.
    static let currencyList = _R.storyboard.currencyList()
    /// Storyboard `CurrencyPairsList`.
    static let currencyPairsList = _R.storyboard.currencyPairsList()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "AddCurrency", bundle: ...)`
    static func addCurrency(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.addCurrency)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "CurrencyList", bundle: ...)`
    static func currencyList(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.currencyList)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "CurrencyPairsList", bundle: ...)`
    static func currencyPairsList(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.currencyPairsList)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 4 colors.
  struct color {
    /// Color `ERBlack`.
    static let erBlack = Rswift.ColorResource(bundle: R.hostingBundle, name: "ERBlack")
    /// Color `ERBlue`.
    static let erBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "ERBlue")
    /// Color `ERFade`.
    static let erFade = Rswift.ColorResource(bundle: R.hostingBundle, name: "ERFade")
    /// Color `ERGray`.
    static let erGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "ERGray")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ERBlack", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func erBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.erBlack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ERBlue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func erBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.erBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ERFade", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func erFade(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.erFade, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ERGray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func erGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.erGray, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 14 files.
  struct file {
    /// Resource file `MockCurrenciesResponse.json`.
    static let mockCurrenciesResponseJson = Rswift.FileResource(bundle: R.hostingBundle, name: "MockCurrenciesResponse", pathExtension: "json")
    /// Resource file `MockCurrencyPairsResponse.json`.
    static let mockCurrencyPairsResponseJson = Rswift.FileResource(bundle: R.hostingBundle, name: "MockCurrencyPairsResponse", pathExtension: "json")
    /// Resource file `Roboto-Black.ttf`.
    static let robotoBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Black", pathExtension: "ttf")
    /// Resource file `Roboto-BlackItalic.ttf`.
    static let robotoBlackItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-BlackItalic", pathExtension: "ttf")
    /// Resource file `Roboto-Bold.ttf`.
    static let robotoBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Bold", pathExtension: "ttf")
    /// Resource file `Roboto-BoldItalic.ttf`.
    static let robotoBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-BoldItalic", pathExtension: "ttf")
    /// Resource file `Roboto-Italic.ttf`.
    static let robotoItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Italic", pathExtension: "ttf")
    /// Resource file `Roboto-Light.ttf`.
    static let robotoLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Light", pathExtension: "ttf")
    /// Resource file `Roboto-LightItalic.ttf`.
    static let robotoLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-LightItalic", pathExtension: "ttf")
    /// Resource file `Roboto-Medium.ttf`.
    static let robotoMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Medium", pathExtension: "ttf")
    /// Resource file `Roboto-MediumItalic.ttf`.
    static let robotoMediumItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-MediumItalic", pathExtension: "ttf")
    /// Resource file `Roboto-Regular.ttf`.
    static let robotoRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Regular", pathExtension: "ttf")
    /// Resource file `Roboto-Thin.ttf`.
    static let robotoThinTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Thin", pathExtension: "ttf")
    /// Resource file `Roboto-ThinItalic.ttf`.
    static let robotoThinItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-ThinItalic", pathExtension: "ttf")

    /// `bundle.url(forResource: "MockCurrenciesResponse", withExtension: "json")`
    static func mockCurrenciesResponseJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mockCurrenciesResponseJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MockCurrencyPairsResponse", withExtension: "json")`
    static func mockCurrencyPairsResponseJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mockCurrencyPairsResponseJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Black", withExtension: "ttf")`
    static func robotoBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-BlackItalic", withExtension: "ttf")`
    static func robotoBlackItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoBlackItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Bold", withExtension: "ttf")`
    static func robotoBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-BoldItalic", withExtension: "ttf")`
    static func robotoBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Italic", withExtension: "ttf")`
    static func robotoItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Light", withExtension: "ttf")`
    static func robotoLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-LightItalic", withExtension: "ttf")`
    static func robotoLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Medium", withExtension: "ttf")`
    static func robotoMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-MediumItalic", withExtension: "ttf")`
    static func robotoMediumItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoMediumItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Regular", withExtension: "ttf")`
    static func robotoRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Thin", withExtension: "ttf")`
    static func robotoThinTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoThinTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-ThinItalic", withExtension: "ttf")`
    static func robotoThinItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoThinItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 12 fonts.
  struct font: Rswift.Validatable {
    /// Font `Roboto-BlackItalic`.
    static let robotoBlackItalic = Rswift.FontResource(fontName: "Roboto-BlackItalic")
    /// Font `Roboto-Black`.
    static let robotoBlack = Rswift.FontResource(fontName: "Roboto-Black")
    /// Font `Roboto-BoldItalic`.
    static let robotoBoldItalic = Rswift.FontResource(fontName: "Roboto-BoldItalic")
    /// Font `Roboto-Bold`.
    static let robotoBold = Rswift.FontResource(fontName: "Roboto-Bold")
    /// Font `Roboto-Italic`.
    static let robotoItalic = Rswift.FontResource(fontName: "Roboto-Italic")
    /// Font `Roboto-LightItalic`.
    static let robotoLightItalic = Rswift.FontResource(fontName: "Roboto-LightItalic")
    /// Font `Roboto-Light`.
    static let robotoLight = Rswift.FontResource(fontName: "Roboto-Light")
    /// Font `Roboto-MediumItalic`.
    static let robotoMediumItalic = Rswift.FontResource(fontName: "Roboto-MediumItalic")
    /// Font `Roboto-Medium`.
    static let robotoMedium = Rswift.FontResource(fontName: "Roboto-Medium")
    /// Font `Roboto-Regular`.
    static let robotoRegular = Rswift.FontResource(fontName: "Roboto-Regular")
    /// Font `Roboto-ThinItalic`.
    static let robotoThinItalic = Rswift.FontResource(fontName: "Roboto-ThinItalic")
    /// Font `Roboto-Thin`.
    static let robotoThin = Rswift.FontResource(fontName: "Roboto-Thin")

    /// `UIFont(name: "Roboto-Black", size: ...)`
    static func robotoBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBlack, size: size)
    }

    /// `UIFont(name: "Roboto-BlackItalic", size: ...)`
    static func robotoBlackItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBlackItalic, size: size)
    }

    /// `UIFont(name: "Roboto-Bold", size: ...)`
    static func robotoBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBold, size: size)
    }

    /// `UIFont(name: "Roboto-BoldItalic", size: ...)`
    static func robotoBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBoldItalic, size: size)
    }

    /// `UIFont(name: "Roboto-Italic", size: ...)`
    static func robotoItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoItalic, size: size)
    }

    /// `UIFont(name: "Roboto-Light", size: ...)`
    static func robotoLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoLight, size: size)
    }

    /// `UIFont(name: "Roboto-LightItalic", size: ...)`
    static func robotoLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoLightItalic, size: size)
    }

    /// `UIFont(name: "Roboto-Medium", size: ...)`
    static func robotoMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoMedium, size: size)
    }

    /// `UIFont(name: "Roboto-MediumItalic", size: ...)`
    static func robotoMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoMediumItalic, size: size)
    }

    /// `UIFont(name: "Roboto-Regular", size: ...)`
    static func robotoRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoRegular, size: size)
    }

    /// `UIFont(name: "Roboto-Thin", size: ...)`
    static func robotoThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoThin, size: size)
    }

    /// `UIFont(name: "Roboto-ThinItalic", size: ...)`
    static func robotoThinItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoThinItalic, size: size)
    }

    static func validate() throws {
      if R.font.robotoBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Black' could not be loaded, is 'Roboto-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoBlackItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-BlackItalic' could not be loaded, is 'Roboto-BlackItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Bold' could not be loaded, is 'Roboto-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-BoldItalic' could not be loaded, is 'Roboto-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Italic' could not be loaded, is 'Roboto-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Light' could not be loaded, is 'Roboto-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-LightItalic' could not be loaded, is 'Roboto-LightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Medium' could not be loaded, is 'Roboto-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-MediumItalic' could not be loaded, is 'Roboto-MediumItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Regular' could not be loaded, is 'Roboto-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Thin' could not be loaded, is 'Roboto-Thin.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoThinItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-ThinItalic' could not be loaded, is 'Roboto-ThinItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 12 images.
  struct image {
    /// Image `Add`.
    static let add = Rswift.ImageResource(bundle: R.hostingBundle, name: "Add")
    /// Image `CZK`.
    static let czK = Rswift.ImageResource(bundle: R.hostingBundle, name: "CZK")
    /// Image `DKK`.
    static let dkK = Rswift.ImageResource(bundle: R.hostingBundle, name: "DKK")
    /// Image `EUR`.
    static let euR = Rswift.ImageResource(bundle: R.hostingBundle, name: "EUR")
    /// Image `GBP`.
    static let gbP = Rswift.ImageResource(bundle: R.hostingBundle, name: "GBP")
    /// Image `HKD`.
    static let hkD = Rswift.ImageResource(bundle: R.hostingBundle, name: "HKD")
    /// Image `HUF`.
    static let huF = Rswift.ImageResource(bundle: R.hostingBundle, name: "HUF")
    /// Image `NOK`.
    static let noK = Rswift.ImageResource(bundle: R.hostingBundle, name: "NOK")
    /// Image `PLN`.
    static let plN = Rswift.ImageResource(bundle: R.hostingBundle, name: "PLN")
    /// Image `SEK`.
    static let seK = Rswift.ImageResource(bundle: R.hostingBundle, name: "SEK")
    /// Image `SGD`.
    static let sgD = Rswift.ImageResource(bundle: R.hostingBundle, name: "SGD")
    /// Image `USD`.
    static let usD = Rswift.ImageResource(bundle: R.hostingBundle, name: "USD")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Add", bundle: ..., traitCollection: ...)`
    static func add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CZK", bundle: ..., traitCollection: ...)`
    static func czK(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.czK, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DKK", bundle: ..., traitCollection: ...)`
    static func dkK(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dkK, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EUR", bundle: ..., traitCollection: ...)`
    static func euR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.euR, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GBP", bundle: ..., traitCollection: ...)`
    static func gbP(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gbP, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HKD", bundle: ..., traitCollection: ...)`
    static func hkD(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hkD, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HUF", bundle: ..., traitCollection: ...)`
    static func huF(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.huF, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NOK", bundle: ..., traitCollection: ...)`
    static func noK(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noK, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PLN", bundle: ..., traitCollection: ...)`
    static func plN(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plN, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SEK", bundle: ..., traitCollection: ...)`
    static func seK(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.seK, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SGD", bundle: ..., traitCollection: ...)`
    static func sgD(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sgD, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "USD", bundle: ..., traitCollection: ...)`
    static func usD(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.usD, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 3 nibs.
  struct nib {
    /// Nib `AddItemTableViewCell`.
    static let addItemTableViewCell = _R.nib._AddItemTableViewCell()
    /// Nib `CurrencyPairsTableViewCell`.
    static let currencyPairsTableViewCell = _R.nib._CurrencyPairsTableViewCell()
    /// Nib `CurrencyTableViewCell`.
    static let currencyTableViewCell = _R.nib._CurrencyTableViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AddItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addItemTableViewCell) instead")
    static func addItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CurrencyPairsTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.currencyPairsTableViewCell) instead")
    static func currencyPairsTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.currencyPairsTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CurrencyTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.currencyTableViewCell) instead")
    static func currencyTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.currencyTableViewCell)
    }
    #endif

    static func addItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddItemTableViewCell? {
      return R.nib.addItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddItemTableViewCell
    }

    static func currencyPairsTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CurrencyPairsTableViewCell? {
      return R.nib.currencyPairsTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CurrencyPairsTableViewCell
    }

    static func currencyTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CurrencyTableViewCell? {
      return R.nib.currencyTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CurrencyTableViewCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 3 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AddItemTableViewCell`.
    static let addItemTableViewCell: Rswift.ReuseIdentifier<AddItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "AddItemTableViewCell")
    /// Reuse identifier `CurrencyPairsTableViewCell`.
    static let currencyPairsTableViewCell: Rswift.ReuseIdentifier<CurrencyPairsTableViewCell> = Rswift.ReuseIdentifier(identifier: "CurrencyPairsTableViewCell")
    /// Reuse identifier `CurrencyTableViewCell`.
    static let currencyTableViewCell: Rswift.ReuseIdentifier<CurrencyTableViewCell> = Rswift.ReuseIdentifier(identifier: "CurrencyTableViewCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.accessibility` struct is generated, and contains static references to 7 localization keys.
    struct accessibility {
      /// Value: %@ Flag
      static let currencyFlagDescribed = Rswift.StringResource(key: "currency.flagDescribed", tableName: "Accessibility", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add Currency Pair
      static let currencyAdd = Rswift.StringResource(key: "currency.add", tableName: "Accessibility", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Currency Code
      static let currencyCode = Rswift.StringResource(key: "currency.code", tableName: "Accessibility", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Currency Flag
      static let currencyFlag = Rswift.StringResource(key: "currency.flag", tableName: "Accessibility", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Currency Name
      static let currencyName = Rswift.StringResource(key: "currency.name", tableName: "Accessibility", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: One %@ is %@ 
      static let currencyPairExchangeRateEquals = Rswift.StringResource(key: "currencyPair.exchangeRateEquals", tableName: "Accessibility", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Second currency name and code
      static let currencyPairSecondCurrencyNameAndCode = Rswift.StringResource(key: "currencyPair.secondCurrencyNameAndCode", tableName: "Accessibility", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: %@ Flag
      static func currencyFlagDescribed(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("currency.flagDescribed", tableName: "Accessibility", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Accessibility", preferredLanguages: preferredLanguages) else {
          return "currency.flagDescribed"
        }

        let format = NSLocalizedString("currency.flagDescribed", tableName: "Accessibility", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Add Currency Pair
      static func currencyAdd(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("currency.add", tableName: "Accessibility", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Accessibility", preferredLanguages: preferredLanguages) else {
          return "currency.add"
        }

        return NSLocalizedString("currency.add", tableName: "Accessibility", bundle: bundle, comment: "")
      }

      /// Value: Currency Code
      static func currencyCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("currency.code", tableName: "Accessibility", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Accessibility", preferredLanguages: preferredLanguages) else {
          return "currency.code"
        }

        return NSLocalizedString("currency.code", tableName: "Accessibility", bundle: bundle, comment: "")
      }

      /// Value: Currency Flag
      static func currencyFlag(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("currency.flag", tableName: "Accessibility", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Accessibility", preferredLanguages: preferredLanguages) else {
          return "currency.flag"
        }

        return NSLocalizedString("currency.flag", tableName: "Accessibility", bundle: bundle, comment: "")
      }

      /// Value: Currency Name
      static func currencyName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("currency.name", tableName: "Accessibility", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Accessibility", preferredLanguages: preferredLanguages) else {
          return "currency.name"
        }

        return NSLocalizedString("currency.name", tableName: "Accessibility", bundle: bundle, comment: "")
      }

      /// Value: One %@ is %@ 
      static func currencyPairExchangeRateEquals(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("currencyPair.exchangeRateEquals", tableName: "Accessibility", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Accessibility", preferredLanguages: preferredLanguages) else {
          return "currencyPair.exchangeRateEquals"
        }

        let format = NSLocalizedString("currencyPair.exchangeRateEquals", tableName: "Accessibility", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// Value: Second currency name and code
      static func currencyPairSecondCurrencyNameAndCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("currencyPair.secondCurrencyNameAndCode", tableName: "Accessibility", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Accessibility", preferredLanguages: preferredLanguages) else {
          return "currencyPair.secondCurrencyNameAndCode"
        }

        return NSLocalizedString("currencyPair.secondCurrencyNameAndCode", tableName: "Accessibility", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.localised` struct is generated, and contains static references to 7 localization keys.
    struct localised {
      /// en translation: Add currency pair
      ///
      /// Locales: en
      static let currenciesAdd = Rswift.StringResource(key: "currencies.add", tableName: "Localised", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Choose a currency pair to compare their live rates
      ///
      /// Locales: en
      static let currenciesChoose = Rswift.StringResource(key: "currencies.choose", tableName: "Localised", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Currencies
      ///
      /// Locales: en
      static let currenciesTitle = Rswift.StringResource(key: "currencies.title", tableName: "Localised", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Ok
      ///
      /// Locales: en
      static let ok = Rswift.StringResource(key: "ok", tableName: "Localised", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Sorry
      ///
      /// Locales: en
      static let errorTitle = Rswift.StringResource(key: "error.title", tableName: "Localised", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: There was an error. Please try again
      ///
      /// Locales: en
      static let errorGenericMessage = Rswift.StringResource(key: "error.genericMessage", tableName: "Localised", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: You have already selected this currency for your currency pair: %@. Please select another.
      ///
      /// Locales: en
      static let currenciesAlreadySelected = Rswift.StringResource(key: "currencies.alreadySelected", tableName: "Localised", bundle: R.hostingBundle, locales: ["en"], comment: nil)

      /// en translation: Add currency pair
      ///
      /// Locales: en
      static func currenciesAdd(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("currencies.add", tableName: "Localised", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localised", preferredLanguages: preferredLanguages) else {
          return "currencies.add"
        }

        return NSLocalizedString("currencies.add", tableName: "Localised", bundle: bundle, comment: "")
      }

      /// en translation: Choose a currency pair to compare their live rates
      ///
      /// Locales: en
      static func currenciesChoose(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("currencies.choose", tableName: "Localised", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localised", preferredLanguages: preferredLanguages) else {
          return "currencies.choose"
        }

        return NSLocalizedString("currencies.choose", tableName: "Localised", bundle: bundle, comment: "")
      }

      /// en translation: Currencies
      ///
      /// Locales: en
      static func currenciesTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("currencies.title", tableName: "Localised", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localised", preferredLanguages: preferredLanguages) else {
          return "currencies.title"
        }

        return NSLocalizedString("currencies.title", tableName: "Localised", bundle: bundle, comment: "")
      }

      /// en translation: Ok
      ///
      /// Locales: en
      static func ok(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ok", tableName: "Localised", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localised", preferredLanguages: preferredLanguages) else {
          return "ok"
        }

        return NSLocalizedString("ok", tableName: "Localised", bundle: bundle, comment: "")
      }

      /// en translation: Sorry
      ///
      /// Locales: en
      static func errorTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error.title", tableName: "Localised", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localised", preferredLanguages: preferredLanguages) else {
          return "error.title"
        }

        return NSLocalizedString("error.title", tableName: "Localised", bundle: bundle, comment: "")
      }

      /// en translation: There was an error. Please try again
      ///
      /// Locales: en
      static func errorGenericMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error.genericMessage", tableName: "Localised", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localised", preferredLanguages: preferredLanguages) else {
          return "error.genericMessage"
        }

        return NSLocalizedString("error.genericMessage", tableName: "Localised", bundle: bundle, comment: "")
      }

      /// en translation: You have already selected this currency for your currency pair: %@. Please select another.
      ///
      /// Locales: en
      static func currenciesAlreadySelected(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("currencies.alreadySelected", tableName: "Localised", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localised", preferredLanguages: preferredLanguages) else {
          return "currencies.alreadySelected"
        }

        let format = NSLocalizedString("currencies.alreadySelected", tableName: "Localised", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AddItemTableViewCell.validate()
    }

    struct _AddItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = AddItemTableViewCell

      let bundle = R.hostingBundle
      let identifier = "AddItemTableViewCell"
      let name = "AddItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddItemTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Add", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Add' is used in nib 'AddItemTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "ERBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'ERBlue' is used in storyboard 'AddItemTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _CurrencyPairsTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CurrencyPairsTableViewCell

      let bundle = R.hostingBundle
      let identifier = "CurrencyPairsTableViewCell"
      let name = "CurrencyPairsTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CurrencyPairsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CurrencyPairsTableViewCell
      }

      fileprivate init() {}
    }

    struct _CurrencyTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CurrencyTableViewCell

      let bundle = R.hostingBundle
      let identifier = "CurrencyTableViewCell"
      let name = "CurrencyTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CurrencyTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CurrencyTableViewCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try addCurrency.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try currencyList.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try currencyPairsList.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct addCurrency: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let addCurrencyViewController = StoryboardViewControllerResource<AddCurrencyViewController>(identifier: "AddCurrencyViewController")
      let bundle = R.hostingBundle
      let name = "AddCurrency"

      func addCurrencyViewController(_: Void = ()) -> AddCurrencyViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addCurrencyViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Add", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Add' is used in storyboard 'AddCurrency', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "ERBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'ERBlack' is used in storyboard 'AddCurrency', but couldn't be loaded.") }
          if UIKit.UIColor(named: "ERBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'ERBlue' is used in storyboard 'AddCurrency', but couldn't be loaded.") }
        }
        if _R.storyboard.addCurrency().addCurrencyViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addCurrencyViewController' could not be loaded from storyboard 'AddCurrency' as 'AddCurrencyViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct currencyList: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let currencyListViewController = StoryboardViewControllerResource<CurrencyListViewController>(identifier: "CurrencyListViewController")
      let name = "CurrencyList"

      func currencyListViewController(_: Void = ()) -> CurrencyListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: currencyListViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.currencyList().currencyListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'currencyListViewController' could not be loaded from storyboard 'CurrencyList' as 'CurrencyListViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct currencyPairsList: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let currencyPairsListTableViewController = StoryboardViewControllerResource<CurrencyPairsListTableViewController>(identifier: "CurrencyPairsListTableViewController")
      let name = "CurrencyPairsList"

      func currencyPairsListTableViewController(_: Void = ()) -> CurrencyPairsListTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: currencyPairsListTableViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.currencyPairsList().currencyPairsListTableViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'currencyPairsListTableViewController' could not be loaded from storyboard 'CurrencyPairsList' as 'CurrencyPairsListTableViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
